{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","categ","id","results","inputValue","setInputValue","handleInputChange","e","target","name","value","nanoid","className","onSubmit","preventDefault","trim","length","cat","type","onChange","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","image","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1434edbd.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\n\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState({\r\n        categ: '',\r\n        id: '',\r\n        results: '10'\r\n    });\r\n    \r\n    const handleInputChange = (e) => {\r\n        setInputValue({\r\n            ...inputValue,\r\n            [e.target.name]: e.target.value,\r\n            id: nanoid()\r\n        });\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.categ.trim().length > 1) {\r\n\r\n            setCategories( cat => [inputValue, ...cat] );\r\n            setInputValue({\r\n                categ: '',\r\n                id: '',\r\n                results: '10'\r\n            });\r\n        } \r\n    }\r\n\r\n    return (\r\n\r\n        <form className=\"form-categ\" onSubmit={ handleSubmit }>\r\n            <h2>Add Category:</h2>\r\n\r\n            <input\r\n                name=\"categ\"\r\n                className=\"input-field\"\r\n                type=\"text\"\r\n                value={ inputValue.categ }\r\n                onChange= { (e) => handleInputChange(e) }\r\n                placeholder=\"Search gif...\"\r\n            />\r\n\r\n            <div className=\"div-search\">\r\n                <div className= \"div-select\">\r\n                    <p>Number of Results:</p>\r\n                    <select name=\"results\" value={ inputValue.results } onChange={ (e) => handleInputChange(e) }>\r\n\r\n                        <option value=\"10\">10</option>\r\n                        <option value=\"20\">20</option>\r\n                        <option value=\"30\">30</option>\r\n                        <option value=\"40\">40</option>\r\n                        <option value=\"50\">50</option>\r\n\r\n                    </select>\r\n                </div>\r\n\r\n                <input className=\"input-btn\" type=\"submit\" value=\"Search\"></input>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n\r\n}","// regresa promesa que resuelve la colecciÃ³n de gifs\r\nexport const getGifs = async( category, results ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI ( category )}&limit=${ results }&api_key=F2G87QQamduTvl186RTBTLwMFL30U85c`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url \r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { image } ) => {\r\n\r\n    return (\r\n        <div className=\"grid-item card animate__animated animate__fadeIn\">\r\n            <img className=\"gif\" src={ image.url } alt={ image.title }></img>\r\n            <p>{ image.title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid =  ({ category, results }) => {\r\n    \r\n    const { data:images, loading } = useFetchGifs( category, results );\r\n\r\n    return (\r\n        <>\r\n            {\r\n            loading?\r\n\r\n                <p className=\"loading animate__animated animate__flash\">Loading...</p>\r\n            :\r\n                (    \r\n                <div> \r\n                    <hr />\r\n\r\n                    <h2 className=\"h2-input-value animate__animated animate__fadeIn\"> \r\n                        {category === ''? '' : `${ results } results for \"${ category }\":`} \r\n                    </h2>\r\n                    \r\n                    <div className=\"gif-grid\">\r\n                        {\r\n                            images.map( image => \r\n                                \r\n                                <GifGridItem \r\n                                key = { image.id }\r\n                                image = { image } />\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>   \r\n                )\r\n            }\r\n\r\n        </>    \r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category, results) => {\r\n  \r\n    const [state, setState] = useState({\r\n      \r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        \r\n        getGifs( category, results )\r\n            .then( imgs => {\r\n                \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                }) \r\n                  \r\n        })\r\n\r\n    }, [ category, results ]);\r\n\r\n\r\n    return state;\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"h1-title\">GifExpertApp</h1>\r\n            \r\n            <AddCategory setCategories= { setCategories }/>\r\n\r\n           <div>\r\n                { \r\n                    categories.map( (category) => (\r\n\r\n                        <GifGrid\r\n                        key={category.id}\r\n                        category={category.categ}\r\n                        results= {category.results}\r\n                        />\r\n                    \r\n                    ))\r\n                }\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}